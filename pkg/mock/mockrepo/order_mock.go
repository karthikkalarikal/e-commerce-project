// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/order.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repository/interfaces/order.go -destination=pkg/mock/mockrepo/order_mock.go -package=mockrepo
//
// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	reflect "reflect"

	domain "github.com/karthikkalarikal/ecommerce-project/pkg/domain"
	models "github.com/karthikkalarikal/ecommerce-project/pkg/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepositry is a mock of OrderRepositry interface.
type MockOrderRepositry struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositryMockRecorder
}

// MockOrderRepositryMockRecorder is the mock recorder for MockOrderRepositry.
type MockOrderRepositryMockRecorder struct {
	mock *MockOrderRepositry
}

// NewMockOrderRepositry creates a new mock instance.
func NewMockOrderRepositry(ctrl *gomock.Controller) *MockOrderRepositry {
	mock := &MockOrderRepositry{ctrl: ctrl}
	mock.recorder = &MockOrderRepositryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepositry) EXPECT() *MockOrderRepositryMockRecorder {
	return m.recorder
}

// AddAmountToOrder mocks base method.
func (m *MockOrderRepositry) AddAmountToOrder(amount float64, orderId uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAmountToOrder", amount, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAmountToOrder indicates an expected call of AddAmountToOrder.
func (mr *MockOrderRepositryMockRecorder) AddAmountToOrder(amount, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAmountToOrder", reflect.TypeOf((*MockOrderRepositry)(nil).AddAmountToOrder), amount, orderId)
}

// AddMondyToExistingWallet mocks base method.
func (m *MockOrderRepositry) AddMondyToExistingWallet(userId int, amount float64) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMondyToExistingWallet", userId, amount)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMondyToExistingWallet indicates an expected call of AddMondyToExistingWallet.
func (mr *MockOrderRepositryMockRecorder) AddMondyToExistingWallet(userId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMondyToExistingWallet", reflect.TypeOf((*MockOrderRepositry)(nil).AddMondyToExistingWallet), userId, amount)
}

// AddMoneyToWallet mocks base method.
func (m *MockOrderRepositry) AddMoneyToWallet(userId int, amount float64) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMoneyToWallet", userId, amount)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMoneyToWallet indicates an expected call of AddMoneyToWallet.
func (mr *MockOrderRepositryMockRecorder) AddMoneyToWallet(userId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMoneyToWallet", reflect.TypeOf((*MockOrderRepositry)(nil).AddMoneyToWallet), userId, amount)
}

// AddToOrder mocks base method.
func (m *MockOrderRepositry) AddToOrder(arg0, arg1 int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToOrder", arg0, arg1)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToOrder indicates an expected call of AddToOrder.
func (mr *MockOrderRepositryMockRecorder) AddToOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToOrder", reflect.TypeOf((*MockOrderRepositry)(nil).AddToOrder), arg0, arg1)
}

// ChangeOrderStatus mocks base method.
func (m *MockOrderRepositry) ChangeOrderStatus(orderId int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrderStatus", orderId)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockOrderRepositryMockRecorder) ChangeOrderStatus(orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*MockOrderRepositry)(nil).ChangeOrderStatus), orderId)
}

// CheckForWallet mocks base method.
func (m *MockOrderRepositry) CheckForWallet(userId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckForWallet", userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckForWallet indicates an expected call of CheckForWallet.
func (mr *MockOrderRepositryMockRecorder) CheckForWallet(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckForWallet", reflect.TypeOf((*MockOrderRepositry)(nil).CheckForWallet), userId)
}

// GetDeliveryAddress mocks base method.
func (m *MockOrderRepositry) GetDeliveryAddress(userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeliveryAddress", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeliveryAddress indicates an expected call of GetDeliveryAddress.
func (mr *MockOrderRepositryMockRecorder) GetDeliveryAddress(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeliveryAddress", reflect.TypeOf((*MockOrderRepositry)(nil).GetDeliveryAddress), userId)
}

// GetDetailedOrderThroughId mocks base method.
func (m *MockOrderRepositry) GetDetailedOrderThroughId(orderId int) (models.CombinedOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailedOrderThroughId", orderId)
	ret0, _ := ret[0].(models.CombinedOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailedOrderThroughId indicates an expected call of GetDetailedOrderThroughId.
func (mr *MockOrderRepositryMockRecorder) GetDetailedOrderThroughId(orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailedOrderThroughId", reflect.TypeOf((*MockOrderRepositry)(nil).GetDetailedOrderThroughId), orderId)
}

// GetItemsByOrderId mocks base method.
func (m *MockOrderRepositry) GetItemsByOrderId(orderId int) ([]models.ItemDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByOrderId", orderId)
	ret0, _ := ret[0].([]models.ItemDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByOrderId indicates an expected call of GetItemsByOrderId.
func (mr *MockOrderRepositryMockRecorder) GetItemsByOrderId(orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByOrderId", reflect.TypeOf((*MockOrderRepositry)(nil).GetItemsByOrderId), orderId)
}

// GetOrder mocks base method.
func (m *MockOrderRepositry) GetOrder(arg0 int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepositryMockRecorder) GetOrder(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepositry)(nil).GetOrder), arg0)
}

// GetPaymentStatus mocks base method.
func (m *MockOrderRepositry) GetPaymentStatus(orderId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatus", orderId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatus indicates an expected call of GetPaymentStatus.
func (mr *MockOrderRepositryMockRecorder) GetPaymentStatus(orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatus", reflect.TypeOf((*MockOrderRepositry)(nil).GetPaymentStatus), orderId)
}

// GetTotalAmount mocks base method.
func (m *MockOrderRepositry) GetTotalAmount(orderId int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalAmount", orderId)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalAmount indicates an expected call of GetTotalAmount.
func (mr *MockOrderRepositryMockRecorder) GetTotalAmount(orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalAmount", reflect.TypeOf((*MockOrderRepositry)(nil).GetTotalAmount), orderId)
}

// GetUserOrders mocks base method.
func (m *MockOrderRepositry) GetUserOrders(userId int) ([]models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", userId)
	ret0, _ := ret[0].([]models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockOrderRepositryMockRecorder) GetUserOrders(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockOrderRepositry)(nil).GetUserOrders), userId)
}

// GetWalletByUserId mocks base method.
func (m *MockOrderRepositry) GetWalletByUserId(userId int) (domain.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserId", userId)
	ret0, _ := ret[0].(domain.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserId indicates an expected call of GetWalletByUserId.
func (mr *MockOrderRepositryMockRecorder) GetWalletByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserId", reflect.TypeOf((*MockOrderRepositry)(nil).GetWalletByUserId), userId)
}

// TotalAmountInCart mocks base method.
func (m *MockOrderRepositry) TotalAmountInCart(userId int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalAmountInCart", userId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalAmountInCart indicates an expected call of TotalAmountInCart.
func (mr *MockOrderRepositryMockRecorder) TotalAmountInCart(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalAmountInCart", reflect.TypeOf((*MockOrderRepositry)(nil).TotalAmountInCart), userId)
}
