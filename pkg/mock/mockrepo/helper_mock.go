// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/helper.go
//
// Generated by this command:
//
//	mockgen -source=pkg/repository/interfaces/helper.go -destination=pkg/mock/mockrepo/helper_mock.go -package=mockrepo
//
// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	reflect "reflect"

	domain "github.com/karthikkalarikal/ecommerce-project/pkg/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockHelperRepository is a mock of HelperRepository interface.
type MockHelperRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHelperRepositoryMockRecorder
}

// MockHelperRepositoryMockRecorder is the mock recorder for MockHelperRepository.
type MockHelperRepositoryMockRecorder struct {
	mock *MockHelperRepository
}

// NewMockHelperRepository creates a new mock instance.
func NewMockHelperRepository(ctrl *gomock.Controller) *MockHelperRepository {
	mock := &MockHelperRepository{ctrl: ctrl}
	mock.recorder = &MockHelperRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelperRepository) EXPECT() *MockHelperRepositoryMockRecorder {
	return m.recorder
}

// FindIfUserExists mocks base method.
func (m *MockHelperRepository) FindIfUserExists(userId int, str string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindIfUserExists", userId, str)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindIfUserExists indicates an expected call of FindIfUserExists.
func (mr *MockHelperRepositoryMockRecorder) FindIfUserExists(userId, str any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindIfUserExists", reflect.TypeOf((*MockHelperRepository)(nil).FindIfUserExists), userId, str)
}

// FindProductById mocks base method.
func (m *MockHelperRepository) FindProductById(id int) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductById", id)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductById indicates an expected call of FindProductById.
func (mr *MockHelperRepositoryMockRecorder) FindProductById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductById", reflect.TypeOf((*MockHelperRepository)(nil).FindProductById), id)
}

// GetUserDetailsThroughId mocks base method.
func (m *MockHelperRepository) GetUserDetailsThroughId(id int) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailsThroughId", id)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetailsThroughId indicates an expected call of GetUserDetailsThroughId.
func (mr *MockHelperRepositoryMockRecorder) GetUserDetailsThroughId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailsThroughId", reflect.TypeOf((*MockHelperRepository)(nil).GetUserDetailsThroughId), id)
}
